Recently Completed:
- Remove dead Spawn (pizzas) after battle ✅
- Create animation state and define animation frames ✅
- Resolve issue, if hp is over a certain percentage it disappears off screen ✅
- Burn Status (Damage per turn on enemy. Currently damages player) ✅
- Objects with looping animations (torch, smoke, stance animation, breathing, combat stance, etc. ) ✅
- fix defenseUp from calling each turn ✅
- Create Stat increase or decrese statuses --In Progress-- ✅ 
    - Create powerUp() and removePowerUp() ✅
    - Create powerDown() and removePowerDown() ✅
    - Create healAndDefUp() ✅
- Create buttons for mobile ✅
    - Create element()
    - append elements
    - 



TODO: 
- Refactor Stats to only be Power and Def (for now)
- Add 5% crit modifier and stat increase
    - Consider adding crit chance as stat
- Create solution for having multiple status effects [array of status]
    - change statuses to array, 
    - create method to handle array and expiresIn
    - decrement each for expiresIn
- Create object class for non-person objects with idle animations
- Create stable background image for overworld maps
- Find solution for overworldmap walls
- Case for if all Spawn die, display death screen/restart game?
- New Object Stone Art (design for Spawns)
- New Level Art / New Spawn Art
- Story Cutscenes (Start basic, use transitions)
- Story Script ( basic script to develop )
- Design Menu Color Schemes/Organize Css Variables/
- Clean Up Code/Remove Console Logs/ 
- Check for DRY, SOLID, and Big0 principles 

















✅ Completed ✅: 
- Create Overworld✅
- Create Game-Container✅
    - target canvas elemnt ✅
    - set context for canvas (requires context to draw)✅
    - Method for game loop to recursively run✅
    - call draw methods for upper/lower images✅
    - Map game objects to overworld at their set positions✅
    - apply pause menu logic✅
    - Bind action inputs to key press listeners✅
        - create keypress (enter) for interacting✅
        - keypress for exiting pause menu (escape)✅
    - Bind hero position and check for cutscenes at current position✅
    - create Start map method (pass new Overworld Map object(with a map config object))✅
    - add logic to handles creating and removing walls from player position/state✅
    - create init method for initializing overworld✅
        - add save data logic✅
        - init and load the hud for overworld✅
        - start game loop✅
- Create OverworldMap class and config it✅
    - pass the overworld map:
        - gameObjects✅
        - cutscene spaces✅
        - lower image✅
        - upper image✅
        - isCutscenePlaying value✅
        - isPaused value✅
    - Create draw methods for upper and lower ✅images
    - method to check if space is taken by object or wall✅
    - method to mount game objects in the overworldmap✅
    - method to start a cutscene✅
    - method to check for actionCutscene✅
    - method to check for cutscene spaces (footstep cutscenes)✅
    - method to add walls✅
    - method to remove walls✅
    - method to move walls (players and npcs contain walls that need to move as players/npcs move)✅
    - Create window object that contains OverworldMaps✅
    - Define and Build 3 OverworldMaps with objects, npcs, events, cutscenes, and battles✅

- Overworld events✅
    - uses a map and an event✅
    - define overworld event behaviors✅
        - method to resolve overworld events:
        - idle behavior✅
            - define on complete handler✅
        - stand behavior✅
            -  define on complete handler✅
        - walk behavior✅
            -  define on complete handler✅
        - resolve text message event✅
            -  define on complete handler✅
        - change maps event✅
            -  define on complete handler✅
            - include scene transitions✅
        - battle event✅
            - initialize battle in game-container✅
            - on complete handler for ifWon✅
        - pause event✅
            - define on comeplete handler✅
        - adding a story flag✅
            - define resolver✅
        - crafting menu event✅
            - define on complete handler✅
        - init method to initialize overworld events✅
            -  async promise handling✅
            - resolver for events✅

- Direction Input✅
    - Define array for holding direction ✅(heldDirections) inputs held down ( help handle multiple inputs at once)✅
    - map key binds✅
    - getter method for held direction value✅
    - init method✅
        -  add event listeners to map key down presses as events and reference the index of heldDirections for value✅
        - add event listener to map key up press (release) as events that reference the index of heldDirections to auto adjust to held values✅

- Game Objects✅
    - Accept config object for definition of properties✅
        - base value of isMounted = false✅
        - define game object x and y positioning ✅
        - define direction config for passing overworld event directions as key value pairs (gives instructions in events on how to move objects)✅
        - create a new Sprite Class with default character image if none is provided. set gameObject key to be itself✅
        - define behaviorLoop as [] and behavior loop index = 0✅
        - define talking events for gameObjects as empty array []✅
    - Method to mount gameObjects✅
        - change isMounted value to true✅
        - add walls at x and y positions✅
        - add async setTimeout delay to firing of behaviors as mounting takes place (timing issue)✅
        - update method to update gameObjects✅
        - doBehavior method✅
            - if cutscne is playing, exit out (return)✅
            - define event config as this game object's behaviorLoop (index)✅
            - set next game event to fine in behaviorLoop (index += 1)✅
            - reset behaviorLoop once loop hits behaviorLoop.length (end) ✅

- Person Object✅
    - extend from gameObject (specific type of gameObject)✅
    - accept the same configuration object (super extension)✅
    - set value for moving and moving progress✅
    - set property for 
        - isStanding ✅
        - isIdle✅
        - isPlayerControlled✅
    - direction Update object to handle coordinates for updating direction events✅

    - update method to update movingProgress✅
        - call update Position method when movingProgress is greater than 0 (if it's moving, update it)✅
            - pass directions as keys for moving events✅
        - conditional for ifCutsceneIsPlaying = false, and is player controlled, and has a direction✅
            - updateSprite after✅
        - conditional for ifPaused✅
        - Method to Start Behavior loops✅
            - define behavior types:
                - walk✅
                    - requires move wall✅
                - stand✅
                - idle✅
        - Method for updating person Position✅
            - decrement moving progress value as move inputs ✅
            - have walking complete handler✅
        - Method for updating sprite✅
            - define idle position, and idle instructions (facing down, facing up, etc.)✅




- Sprite Object✅
    - accept config object✅
    - reference the gameObject as this.gameObject✅
    - create new Image✅
        - assign image as image.src✅
        - image onload callback✅
            - sets image isLoaded = true✅
    - create shadow image as new Image✅
        - define if object uses a shadow✅
        - if it is using a shadow, pass shadow image as shadow.src✅
    - create shadow onLoad callback✅
        - define isShadowLoaded as true✅
    - set useShadow as true for objects (FIX)
    - define sprite animations (movement animations)✅
        - define animation for :
            - idle-down✅
            - idle-right✅
            - idle-left✅
            - idle-up✅
            - idle (static animation for game objects that don't move)✅
            - walk-down✅
            - walk-right✅
            - walk-left✅
            - walk-up✅
    - Define current animation✅
        - use config object✅
        - set default value to idle-down✅
    - Define animation frames✅
        - set to 0 (default)✅
    - Define animation frame limits✅
        - 8 per frame (fits 16 bit grid)✅
    - Method for getting current frame✅
        - define as getter method✅
    - Method to setAnimation✅
        - Pass method a (key)✅
        - set value to the currentAnimation (key)✅
        - set currentFrame to 0✅
        - define animationFrameProgess limit✅
    - Method to update Animations progress (through event object/animation array)✅
        - decrement the animationFrameProgress if animationFrameProgress is greater than 0✅
        - reset frame progress counter✅
        - define catch if frame is undefined✅
            - reset to 0✅
    - Method to draw the sprite✅
        - accepts context (2d for canvas) and cameraPerson position (x & y coords)✅
        - define x and y position✅
        - use drawImage method and pass sprite shadow at cameraPerson x and y position✅
    - Configure sprite sheet for 32 x 32 pixel art png file (Aseprite image)✅
        -  configure size of sprite (32 x 32)✅

- KeyPressListener✅
    -  define keySafe property to handle conditional for if key matches keyCode✅
        -  if the event matches the keycode we've passed in, and the keysafe flag is true, then call✅
    - add event listeners for key up and key down presses✅
    - define unbind method to remove event listeners if  not needed (menu screens up and down selections vs overworld up, down, left and right movement)✅


- PauseMenu✅
    - accepts progress (save file data) and OnComplete Callback function✅
        - define progress (saving position)✅
        - define onComplete callback✅
    - Method to getOptions for menu page✅
        - if the page is at the root, show options✅
        - map lineup as options (map pizzas as options to select)✅
        - save option✅
            - description, and callback handler()✅
                - this. progress. save() on complete✅
                - close on complete✅
        - Close Option✅
            - close the menu✅
            - close handler callback✅
        - if only one pizza -1 of lineup index✅
        - Define equipped as index 0 of lineup✅
        - Define unequipped as rest of lineup ✅
        - Method to move unequipped to front of lineup "Move to front"✅
        - inclue back option✅
    - Method to create the menu element createElement()✅
        - set html class as PauseMenu✅
        - set class as overlayMenu✅
    - Method to close menus✅
        - unbind keys✅
        - remove the menu/element✅
        - onComplete Callback✅
    - Method to init menu✅
        - call createElement✅
        - create new KeyBoard Menu (new keybinds)✅
        - init new Keyboard menu✅
        - setOptions for keyboard menu✅
        - append the element to the child container✅
        - define esc as instant back out keypress✅

        
- Scene Transitions✅
    - Method to createElement✅
        - create div✅
        - class SceneTransition✅
    - Method to hande effects✅
        - fadeOut method✅
        - add class "fade-out"✅
        - add eventListener to listen for an "on animation end" callback to remove element created✅
        - define number of times this to add event listener✅
    - Method to initialize the sceneTransition✅
        - createElement✅
        - append element✅
        - callback to end✅


- Revealing Text Effect✅
    - accept a config option✅
    - define properties of text effect✅
        - text✅
        - speed✅
        - isDone✅
    - Method to revealOneCharacter at a time✅
        - accept an array of texts✅
        - splice array inbetween each character and set as "span" element✅
        - add class list "revealed" to those that are revealed✅
        - add delay for timing of revealed text✅
        - set isDone to true for all revealed text✅
    - Method to go force push through animation✅
        - warpToDone✅
            - set isDone to true✅
            - for each span element, set to "revealed"✅
    - Method for initializing the revealingText animation✅
        -  set characters to an empty []✅
        - split each character for each span element✅
        - append the span elements✅
        - push the characters array, passing it:
            - spans, delay timer, and speed✅
        - Call revealOneCharacter passing it [characters] array✅

- Object Crafting ✅
    - extension of gameObjects✅
    - super config✅
    - create new Sprite(with config)
        - define animation frames for:
            - used instance✅
            - unused instance✅
    - define storyFlag (condition to keep track of if used or unused)✅
    - define pizzas to be crafted✅
    - define talking events (textmessages to display)✅
        - include events✅
            - pass event type as craftingMenu✅
        - include pizzas as config pizzas✅
        - include story flags✅
    - Method to update() ✅
        - update story flags as used or unused✅
    - use init method from inheritence✅


- Battle Instance/ Battle Class✅
    - accepts an enemy✅
    - accepts an onComplete callback (handles completion)✅

    - Define combatants✅
        - blank object until initialized✅
    - define activeCombatants✅
        - set to null until initialized✅
    - Dynamically add combatants to player team✅
        - for each combatant in playerstate.lineup, add combatant to the this battle✅
    - Dynamically add enemies to the enemy team✅
        - for each combatant in enemy object, add an enemy combatant to the this battle (use id e_, (eNEMy___ID))✅
    - Define items ✅
        - empty array [] until initialized✅
        - forEach item in window.playerState.items, push them into items[]✅
        - define usedItems✅
            - usedInstanceIds = {} until initialized✅
    - Method to add combatant✅
    - Method to remove combatant✅
    - Method to Create battle element✅
        - createElement()✅
            - create div✅
            - add class "Battle" ✅
            - set inner html to be images of combatants✅
            - add class for css styling✅
    - Method to initialize the Battle✅
        - call createElement✅
        - set playerTeam✅
        - set enemyTeam✅
        - Object-map trick for each combatant✅
            - object.keys trick✅
        - Conditionally sort combatants to team✅
            - if team is player, push combatant into playerTeam✅
            - if team is enemy, push combatant into enemyTeam✅
        - initialize playerTeam✅
        - initialize enemeyTeam✅

        - Conditional for if no combatants✅
            - create battle event to return out of battle✅
        - Instantiate a new Turn Cycle✅
            - include onNewEvent callback to handle new events in turn cycle✅
            - include onWinner callback, passing it the winner✅
            - set combatant battle values to playerState values post battle✅
            - filter out usedInstanceIDs from items array✅
            - set "PlayerStateUpdated" as event✅
            - Remove elements on winner✅

- Combatants✅
    - accept config ✅
    - accept relevant battle info✅
    - define activeCombatants✅

    - define combatant properties✅
        - hp✅
        - maxHp✅
        - xp✅
        - maxXp✅
        - power✅
        - defense✅
        - etc.✅
    - Object.keys trick to auto assign any config key values as properties to object✅

    - Methods to define, and apply combatant status effects and remove combat effects✅
        - defUp✅
        - removeDefUp✅
        - defDown✅
        - removeDefDown✅
        - etc.
    - Method for calculating damage✅
    - Method for calculating defense(armor?)✅
    - getters for displaying✅
        - hp%✅
        - xp%✅
        - getting status of isActiveCombatant ✅
        - amount of xp Given✅
    - Method for createELement()✅
        - create div✅
        - add "Combatant" class✅
        - add "data-attributes" for data-combatant✅
        - add data-attributes for data-team✅
        - set innerHTML of element to be this combatant name, this combatant level, etc✅
        - create div for battle stats sheet✅
        - create image elements on the document✅
        - set data-attributes for combatant team✅
        - define properties for filling hp and xp bars with getter methods✅
    - Method to update combatants✅
        - accept changes object (reference to update to)✅
        - modify data-active attributes for hud and battle display✅
        - call hpFills and xpFills methods to update as values change✅
        - upate status elements✅
        - update combatant battle stats✅
    - Method to get events if status replaces turn✅
        - define confusion event✅
    - Method to get events post turn✅
        - define status effect conditionals✅
    - Method to decrement status expiration✅
        - remove methods if expiresIn === 0✅
        - call update() Combatants✅
    - Method to initialize the combatants ✅
        - create elements✅
        - append elemnts into child✅
        - update()✅


- Battle Animations✅
    - accept a battle to reference and an onComplete callback✅
    - Window level object containing each animation✅
    - set animations an async to wait for animation to end before proceeding✅
    - use onComplete callbacks to indicate animation completion✅
    - define css classes for each animation✅
    - define innerHTML for each animation✅
    - define wait time for each animation✅

- Battle Events✅
    - accept an event and a battle to reference✅
    - Method to handle textMessage events✅
        - accepts a resolver as an onComplete callback✅
    - Method to hande stateChange events (statuses, damage, etc)✅
        - accepts a resolver as an onComplete callback✅
        - define how to calculate damage✅
        - define how to handle final damage ✅
            - if < 0, set to = 0✅
        - define how to handle status state changes (recover, burn, damage, etc)✅
        - define handling status removal✅
    - Method to handle submission menu events✅
        - accepts a resolver as an onComplete callback✅
        - create new submissionMenu✅
        - setOptions✅
        - onComplete callback resolver✅
    - Method to handle replacement submissions✅
        - accepts a resolver as an onComplete callback✅
        - create new replacementMenu✅
        - setOptions✅
        - onComplete callback resolver✅
    - Method to handle replacement as a battle event✅
        - accepts resolver as an onComplete callback✅
    - Method to handle giving xp✅
        - if enemy loses, give X xp based on level✅
    - Method to handle battle animations✅
        - uses resolver to resolve animations✅
    - Method to initialize a battle event✅

- Replacement Menu (replace combatants)✅
    - accepts replacements and an onComplete callback✅
    - Method to decide who to replace✅
        - for enemy ai to auto replace✅
    - Method to submit replacement for menu✅
    - Method to display menu✅
        - create new KeyboardMenu✅
        - setOptions for keyboard menu as replacements✅
    - Method to initialize the replacementMenu✅
        - Display menu to player✅
        - call decide() for enemy✅

- Submission Menu (select actions)✅
    - accepts a caster, enemy, items, replacements, and an onComplete callback✅
    - define quantityMap (quantity object for items to reference)✅
        - forEach item, attach and id, ✅
        - if the id exists, add an item for each quantity✅
        - else, add one item✅
        - set items to = Object.values(quantityMap)✅
    - Method to get pages (dynamic options)✅
        - define pages here✅
            - back (return)✅
            - attack moves✅
            - items✅
            - swap(replace) pizza✅
                - map each array as options for ✅
                - menuSubmit✅
                - menuSubmitReplacements✅
                - menuSubmitItems✅
    - Method for handlingSubmissionReplacements✅
        - accepts a replacement✅
        - remove keyboardmenu✅
        - call onComplete✅
    - Method for handling menuSubmissions✅
        - remove keyboardmenu✅
        - set action, define caster, target, targetType, and instanceId✅
        - call oncomplete✅
    - Method for AI deciding actions✅
        - auto use action[0]✅
    - Method to showMenu for player✅
        - show submission menu for player✅
    - Method to showMenus to player✅
        - create newKeyboard menu✅
        - setOptions✅
        - getPages from root✅
    - Method to intialize Submission menu✅
        - accepts a container to go in✅
        - conditional check for if caster is playerControlled, show menu, otherwise ai decide()✅

- Team Hud Display✅
    - accepts a team and a name✅
    - defines team and name✅
    - defines combatants as emtpy [] before filling✅
    - Method to createElement() (team hud overlay)✅
        - create hud elemnt✅
        - set icons✅
        - set tracker for active Combatant with data attributes accordingly✅
    - Method to update team data✅
        - sets data-attributes to active or dead✅
        - sets icon for active, inactive, or dead✅
    - Method to initialize the Team Overlay✅
        - createElement✅
        - update✅
        - appendElement into child✅

- Turn Cycle✅
    - accepts a battle reference, an onNewEvent object, and an onWinner callback✅
    - define battle properties✅
        - current team "player" or "enemy"✅
        - turn counter set to 0 initially✅
        - create turnCounter✅
        - updateTurnCounter✅

    - Method to createTurnCounter✅
    - Method to updateTurnCounter✅
    - Method to remove turnCounter✅
    - Method to handle each Turn✅
        - async to await event resolution✅
        - Conditional to check who's team we're on✅
        - if on player, update counter✅
        - get all relevant information about the turn✅
            - set caster, casterId✅
            - set target, targetId✅
            - set enemy, enemyId✅
            - set targetTeam "player" or "enemy"✅
        - Turn order:✅
            - log statuses✅
            - check for expired events (status)✅
                - decrement status -= 1✅
            - create and await on new submission event for player✅
                - if submission event is a replacement event, then pass turn after replacement event✅
            - conditional check to remove used items ✅
                - if submission has an instanceID, then add it to the unsedInstanceIds✅
            - Handle resulting events for targets✅
                - set submissiona action✅
                - set caster✅
                - set target✅
            - Conditional check for status effects to resolve after actions resolve✅
                - run checks for certain statuses✅
                - check for burn✅
                - check for defUp✅
                    - update() caster✅
            - Conditional check for if target is dead✅
                - if dead, new submission event for replacement event✅
                - if no replacements, call onWinner callback✅
            - Conditional check for if winner exists✅
                - if winner exists, and it is player✅
                    - give xp, and set combatant values to playerState.lineup values✅
                    - if any pizza has 0 hp, remove from playerstate lineup✅
                - if winner is enemy✅
                    - return out of battle ✅
                    - set combatant values to playerState.lineup values✅
            - Conditional check for post events to resolve (if there are no dead combatants and we want statuses to resolve at the end of the the action is selected)✅
        - Method for checking winning team✅
            - getWinningTeam()
                - capture aliveTeams✅
                - forEach combatant, check if there are aliveTeams✅
                - if no alive team for player, return enemy✅
                - if no alive team for enemy,
                return player✅
        - Method to handle going to the next turn✅
            - if currentTeam is "player", call turn for "enemy"✅
            - if currentTeam is "enemy", call turn for "player"✅
        - Method to initialize TurnCycle✅
            - async battleEvent text message to display battle is starting ✅

- Utility Functions 
    - withGrid ✅
        - to align grid values to 16 x 16 and 32 x 32 values
    - asGridCoord✅
        - takes x value * 16
        - takes y value * 16
    - nextPosition✅
        - method to handle direction input with x/y grid coordinates
    - oppositeDirection✅
        - method to return opposite directions
    - wait✅
        - asnyc method to add timing before firing new events
    - randomFromArray✅
        - method to calculate probablity from array
        - fill array with truth or false values to determine probability of arrayItems\length
    - emitEvent✅
        - method to handle dispatching certain events

